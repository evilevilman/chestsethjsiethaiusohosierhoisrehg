; Script by A_Basement / https://discord.com/invite/JrwB6jVxkR
; DRFT Exclusive Macro (Hopefully)
VersionNum := "1.03"


HiddenFunction() {
    LastLoopTime := 0
    MaxLoopTime := 5
    loop 20 {
      LastLoopTime += 1
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
        LastLoopTime := 0
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
        LastLoopTime := 0
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
        LastLoopTime := 0
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
        LastLoopTime := 0
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
        LastLoopTime := 0
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
        LastLoopTime := 0
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
        LastLoopTime := 0
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
        LastLoopTime := 0
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
        LastLoopTime := 0
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
        LastLoopTime := 0
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
        LastLoopTime := 0
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
        LastLoopTime := 0
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      if LastLoopTime >= MaxLoopTime {
        Sleep(1)
      }
      
      ;OutputDebug(Random(100) "`n")
    }
}

HiddenFunction()

#Requires AutoHotkey v2.0 
#Include UWBOCRLib.ahk
#SingleInstance Force
CoordMode "Mouse", "Screen"
SetMouseDelay -1

OffSetX := 10 ;68
OffsetY := 10 ;174
SwitchChange := false
SizeX := 290 ;186
SizeY := 440 ;28
PushNum := 2

global Quests := Map()
Quests["Coin Jars"] := "1"
Quests["Comets"] := "3"
Quests["pinatas"] := "4"
Quests["Lucky Block"] := "5"
Quests["Rainbow Pets"] := "6"
Quests["Pinfiata"] := "7"
Quests["Breakables"] := "8"
Quests["Best Eggs"] := "9"
Quests["rare"] := "10"
Quests["k Diamonds"] := "11"
Quests["diamond breakables"] := "12"
Quests["golden"] := "13"
Quests["Mini"] := "14"

global EnabledQuests := Map()
EnabledQuests["4"] := true
EnabledQuests["7"] := true
EnabledQuests["12"] := true
EnabledQuests["9"] := true
EnabledQuests["10"] := true
EnabledQuests["5"] := true
EnabledQuests["3"] := true
EnabledQuests["1"] := true
EnabledQuests["14"] := true
EnabledQuests["11"] := true
EnabledQuests["8"] := true
EnabledQuests["13"] := true
EnabledQuests["6"] := true

global QuestsToText := Map()
QuestsToText["4"] := "Use Piñatas"
QuestsToText["7"] := "Use Piñatas (Secondary Check)"
QuestsToText["12"] := "Diamond Breakables"
QuestsToText["9"] := "Open Best Egg"
QuestsToText["10"] := "Hatch Rare Pets"
QuestsToText["5"] := "Use Lucky Blocks"
QuestsToText["3"] := "Use Comets"
QuestsToText["1"] := "Use Coin Jars"
QuestsToText["14"] := "Break Minichests"
QuestsToText["11"] := "Earn Diamonds"
QuestsToText["8"] := "Break Breakables"
QuestsToText["13"] := "Make Pets Golden"
QuestsToText["6"] := "Make Pets Rainbow"

global QuestsPriority := Map()
QuestsPriority["4"] := "100"
QuestsPriority["7"] := "100"
QuestsPriority["12"] := "90"
QuestsPriority["9"] := "50"
QuestsPriority["10"] := "50"
QuestsPriority["5"] := "20"
QuestsPriority["3"] := "20"
QuestsPriority["1"] := "20"
QuestsPriority["14"] := "10"
QuestsPriority["11"] := "10"
QuestsPriority["8"] := "10"
QuestsPriority["13"] := "5"
QuestsPriority["6"] := "5"

global QuestMultiTask := Map()
QuestMultiTask["4"] := "Item"
QuestMultiTask["7"] := "Item"
QuestMultiTask["12"] := "Diamond Zone"
QuestMultiTask["9"] := "Egg"
QuestMultiTask["10"] := "Egg"
QuestMultiTask["5"] := "Item"
QuestMultiTask["3"] := "Item"
QuestMultiTask["1"] := "Item"
QuestMultiTask["14"] := "ZoneFarming"
QuestMultiTask["11"] := "ZoneFarming"
QuestMultiTask["8"] := "ZoneFarming"

global QuestNumToItem := Map()
QuestNumToItem["4"] := "piñata"
QuestNumToItem["7"] := "piñata"
QuestNumToItem["3"] := "Comet"
QuestNumToItem["5"] := "Lucky Block"
QuestNumToItem["1"] := "Basic Coin Jar"


global TpWaitTime := 7000
global FailedQuestWaitTime := 120000
global TimeSpentOnQuest := 120000
global Do3StarQuest := false
global Randomize3and4Star := true

global ItemUseAmount := 10
global DelayBetweenItemUse := 5500

global PetMachineArray := ["Bleebo The Alien", "alien parasite", "alien axolotl"]
global EggbackwardsDistance := 1025

global PotionsArray := ["Damage", "Coins", "Lucky Eggs"]
global UseQuestPriority := true
global MultiTaskQuests := true
global UserOwnsAutoFarm := true

global StartingMessage := true
global MacroCanWork := false
global MacroCanWork2 := false
global MacroCanWork3 := false

HiddenFunction()

GetQuests() {
    FirstQuest := ""
    SecondQuest := ""

    HiddenFunction()
    Result1 := Ocr.FromRect(778, 500, 415, 40,,5)
    Result2 := Ocr.FromRect(778, 630, 415, 40,,5)
    HiddenFunction()
    ; OutputDebug("`n Quest1: " Result1.Text)
    ; OutputDebug("`n Quest2: " Result2.Text)

    for QuestFind, QuestValue in Quests {
        if InStr(StrLower(Result1.Text), StrLower(QuestFind), false) {
            ; OutputDebug("`nFound TrueQuest1 : " QuestFind)
            FirstQuest := QuestFind
        }
        if InStr(StrLower(Result2.Text), StrLower(QuestFind), false) {
            ; OutputDebug("`nFound TrueQuest2 : " QuestFind)
            SecondQuest := QuestFind
        }
    }

    return [FirstQuest, SecondQuest]
}


LoadSettings()
QuestUi := Gui()
SetupUI() {
  Tabs := QuestUi.AddTab3("Choose1", ["Main", "Togglable Settings", "Quest Toggles", "Quest Priority", "ChangeLogs"])

  SetDarkWindowFrame(hwnd, boolEnable:=1) {
      hwnd := WinExist(hwnd)
      if VerCompare(A_OSVersion, "10.0.17763") >= 0
          attr := 19
      if VerCompare(A_OSVersion, "10.0.18985") >= 0
          attr := 20
      DllCall("dwmapi\DwmSetWindowAttribute", "ptr", hwnd, "int", attr, "int*", boolEnable, "int", 4)
  }

  QuestUi.Opt("-SysMenu +AlwaysOnTop +Caption")
  SetDarkWindowFrame(QuestUi)
  QuestUi.SetFont("s15 q5 w700", "Ink Free")
  QuestUi.Add("Text","Section cff6f00","Clan Quest Macro V" VersionNum)
  QuestUi.SetFont("s11 w400",  "Arial")
  QuestUi.Add("Text","Section Cblack w250 Wrap","Macro Made by @A_Basement")
  QuestUi.Add("Text","Section Cblack w250 Wrap","A Little Info Before you run the macro:")
  QuestUi.SetFont("s9 w400",  "Arial")
  QuestUi.Add("Text","Section Cblack w250 Wrap", "F3 To start`nF8 To Stop`nMake Sure you turn autohatch on before starting`nDO NOT MOVE YOUR CAMERA FROM BASE POSITION FROM WHEN YOU FIRST JOIN THE GAME`nNO SHINY HOVERBOARD!!!")
  QuestUi.SetFont("s11 w400",  "Arial")
  QuestUi.Add("Text","Section Cblack w250 Wrap","Check out my YT and Discord with the buttons below!")
  QuestUi.Add("Button","xs y380","Enable Macro").OnEvent("Click", EnableMacro)
  QuestUi.Add("Button","yp","Join the Discord").OnEvent("Click", JoinDiscordButton)
  QuestUi.Add("Button","yp","Youtube Channel").OnEvent("Click", YTButton)

  Tabs.UseTab(2)
  QuestUi.SetFont("s15 q5 w700", "Arial")
  QuestUi.Add("Text","Section c000000","Toggleable Settings")
  ; Do shit here later lmao global Randomize3and4Star := true
  QuestUi.SetFont("s9 w400",  "Arial")
  QuestUi.Add("Text","Section","`"Randomize3and4Star`":")
  QuestUi.Add("Checkbox","x390 VRandomize3and4StarUIValue yp Checked" Randomize3and4Star)

  QuestUi.Add("Text","Section xs","`"UseQuestPriority`":")
  QuestUi.Add("Checkbox","x390 VUseQuestPriorityUIValue yp Checked" UseQuestPriority)

  QuestUi.Add("Text","Section xs","`"MultiTaskQuests`":")
  QuestUi.Add("Checkbox","x390 VMultiTaskQuestsUIValue yp Checked" MultiTaskQuests)

  QuestUi.Add("Text","Section xs","`"UserOwnsAutoFarm`":")
  QuestUi.Add("Checkbox","x390 VUserOwnsAutoFarmUIValue yp Checked" UserOwnsAutoFarm)

  QuestUi.Add("Text","Section xs w250 Wrap", "`"TimeSpentOnQuests`" (How Much Time Before Checking For New Quests [IN MILISECONDS])")
  QuestUi.Add("Edit", "x305 w100 h20 yp")
  QuestUi.AddUpDown("VTimeSpentOnQuestUIValue Range1-9999999999999", TimeSpentOnQuest)

  Tabs.UseTab(3)
  QuestUi.SetFont("s15 q5 w700", "Arial")
  QuestUi.Add("Text","Section c000000","Quest Toggles")
  QuestUi.SetFont("s9 q5 w700", "Arial")

  for QuestNum, QuestText in QuestsToText {
    QuestUi.Add("Text","Section xs",QuestText ":")
    QuestUi.Add("Checkbox","x390 V" QuestNum "EnabledUIValue yp Checked" EnabledQuests[QuestNum])
  } 

  Tabs.UseTab(4)
  QuestUi.SetFont("s15 q5 w700", "Arial")
  QuestUi.Add("Text","Section c000000","Quest Priority")
  QuestUi.SetFont("s9 q5 w700", "Arial")

  for QuestNum, QuestText in QuestsToText {
    QuestUi.Add("Text","Section xs",QuestText ":")
    QuestUi.Add("Edit","x350 w60 h20 yp")
    QuestUi.AddUpDown("V" QuestNum "PriorityUIValue Range1-1000", QuestsPriority[QuestNum])
  } 
  
  Tabs.UseTab(5)
  QuestUi.SetFont("s15 q5 w700", "Arial")
  QuestUi.Add("Text","Section c000000","ChangeLogs")
  QuestUi.SetFont("s10 q5 w700", "Arial")
  QuestUi.Add("Text","Section c000000 w250 Wrap","V1.03:`n>Quest Priority Added`n>More Settings Added`n>Quest Multitasking Added")
  QuestUi.Add("Text","Section c000000 w250 Wrap","V1.02:`n>Gui Added`n>Auto Reconnect Added`n>Some Toggleable Settings Added")

  QuestUi.SetFont("s14 q5 w700", "Arial")
  QuestUi.Add("Text","Section c000000","To Do:")
  QuestUi.SetFont("s10 q5 w700", "Arial")
  QuestUi.Add("Text","Section c000000 w250 Wrap",">Add Better Item Use Function`n>Add Missing Quests`n>Allow For Quests 1-2`n>World 1 Quest Support`n>Add Settings for everything else`n>For Firez to pay me :)`n>Make it pop party boxes when no item")

  QuestUi.Show()
}

EnableMacro(*) {
  SumbitValues := QuestUi.Submit()
  global MacroCanWork3 := true
  UpdateSettings(SumbitValues)
  SaveSettings()
}
JoinDiscordButton(*) {
  Run "https://discord.com/invite/JrwB6jVxkR"
}
YTButton(*) {
  Run "https://www.youtube.com/channel/UCKOkQGvHO71nqQjwTiJX5Ww"
}

ObjToMap(Obj, Depth:=5, IndentLevel:="")
{
	if Type(Obj) = "Object"
		Obj := Obj.OwnProps()
    if Type(Obj) = "String" {
      Obj := [Obj]
    }
	for k,v in Obj
	{
		List.= IndentLevel k
		if (IsObject(v) && Depth>1)
			List.="`n" ObjToMap(v, Depth-1, IndentLevel . "    ")
		Else
			List.=":" v
		List.="/\"
	}
	
  NewMap := Map()
  SplitArray := StrSplit(List, "/\")
  for __ArrayNum, SplitText in SplitArray {
    ValueSplit := StrSplit(SplitText, ":")
    
    if InStr(SplitText, ":") {
      NewMap[ValueSplit[1]] := ValueSplit[2]
    }
  }

  return NewMap
}

LoadSettings() {
  if not FileExist("VersionSettings.ini") {
    SaveSettings()
  } else {
    OutputDebug(IniRead("VersionSettings.ini", "Version", "Interesting"))
    if String(IniRead("VersionSettings.ini", "Version", "Interesting")) != String(VersionNum) {
      OutputDebug("F")
      SaveSettings()
    }
  }

  if FileExist("CQMSettings.ini") {
    Randomize3and4Star := IniRead("CQMSettings.ini", "ToggleSettings", "Randomize3and4Star")
    UseQuestPriority := IniRead("CQMSettings.ini", "ToggleSettings", "UseQuestPriority")
    UserOwnsAutoFarm := IniRead("CQMSettings.ini", "ToggleSettings", "UserOwnsAutoFarm")
    MultiTaskQuests := IniRead("CQMSettings.ini", "ToggleSettings", "MultiTaskQuests")
    TimeSpentOnQuest := IniRead("CQMSettings.ini", "ToggleSettings", "TimeSpentOnQuest")


    for QuestNum, __QuestPriority in QuestsPriority {
      QuestsPriority[QuestNum] := IniRead("CQMSettings.ini", "QuestsPriority", QuestNum)
    }

    for QuestNum, __IsQuestEnabled in EnabledQuests {
      EnabledQuests[QuestNum] := IniRead("CQMSettings.ini", "EnabledQuests", QuestNum)
    }
  } else {
    SaveSettings()
  }
}

UpdateSettings(SumbitValues) {
  global Randomize3and4Star := SumbitValues.Randomize3and4StarUIValue
  global UseQuestPriority := SumbitValues.UseQuestPriorityUIValue
  global UserOwnsAutoFarm := SumbitValues.MultiTaskQuestsUIValue
  global MultiTaskQuests := SumbitValues.UserOwnsAutoFarmUIValue
  global TimeSpentOnQuest := SumbitValues.TimeSpentOnQuestUIValue

  FixedSubmitValues := ObjToMap(SumbitValues)

  for QuestNum, __QuestPriority in QuestsPriority {
    QuestsPriority[QuestNum] := FixedSubmitValues[QuestNum "PriorityUIValue"]
  }

  for QuestNum, __IsQuestEnabled in EnabledQuests {
    EnabledQuests[QuestNum] := FixedSubmitValues[QuestNum "EnabledUIValue"]
  }
}

SaveSettings() {
  IniWrite(Randomize3and4Star, "CQMSettings.ini", "ToggleSettings", "Randomize3and4Star")
  IniWrite(UseQuestPriority, "CQMSettings.ini", "ToggleSettings", "UseQuestPriority")
  IniWrite(UserOwnsAutoFarm, "CQMSettings.ini", "ToggleSettings", "UserOwnsAutoFarm")
  IniWrite(MultiTaskQuests, "CQMSettings.ini", "ToggleSettings", "MultiTaskQuests")
  IniWrite(TimeSpentOnQuest, "CQMSettings.ini", "ToggleSettings", "TimeSpentOnQuest")

  for QuestNum, QuestPriorityNum in QuestsPriority {
    IniWrite(QuestPriorityNum, "CQMSettings.ini", "QuestsPriority", QuestNum)
  }

  for QuestNum, Enabler in EnabledQuests {
    IniWrite(Enabler, "CQMSettings.ini", "EnabledQuests", QuestNum)
  }
  
  IniWrite(VersionNum, "VersionSettings.ini", "Version", "Interesting")
}

; Movement Functions
MoveToFinalZone() {
    OddXCheck()
    Sleep(300)
    SendEvent "{Click, 166, 390, 1}"
    Sleep(500)
    loop 3 {
        SendEvent "{Click, 1115, 254, 1}"
    }
    Sleep(300)
    SendText "Alien Lab"
    Sleep(300)
    SendEvent "{Click, 958, 356, 1}"
    Sleep(TpWaitTime)
    SendEvent "{Q Down}{Q Up}"
    Sleep(100)
    SendEvent "{S Down}"
    Sleep(650)
    SendEvent "{S Up}"
}
MoveToVipArea() {
    OddXCheck()
    Sleep(300)
    SendEvent "{Click, 166, 390, 1}"
    Sleep(500)
    loop 3 {
        SendEvent "{Click, 1115, 254, 1}"
    }
    Sleep(300)
    SendText "Tech Spawn"
    Sleep(300)
    SendEvent "{Click, 958, 356, 1}"
    Sleep(TpWaitTime)
    SendEvent "{Q Down}{Q Up}"
    Sleep(100)
    SendEvent "{W Down}"
    Sleep(100)
    SendEvent "{W Up}"
    Sleep(200)
    SendEvent "{A Down}"
    Sleep(3500)
    SendEvent "{A Up}"
    Sleep(500)
    SendEvent "{W Down}"
    Sleep(500)
    SendEvent "{W Up}"
    Sleep(200)
    SendEvent "{A Down}"
    Sleep(2000)
    SendEvent "{A Up}"
}
MoveToBestEgg() {
    OddXCheck()
    Sleep(300)
    SendEvent "{Click, 166, 390, 1}"
    Sleep(500)
    loop 3 {
        SendEvent "{Click, 1115, 254, 1}"
    }
    Sleep(300)
    SendText "Tech Spawn"
    Sleep(300)
    SendEvent "{Click, 958, 356, 1}"
    Sleep(TpWaitTime)
    SendEvent "{Q Down}{Q Up}"
    Sleep(200)
    SendEvent "{S Down}"
    Sleep(900)
    SendEvent "{S Up}"
    Sleep(200)
    SendEvent "{A Down}"
    Sleep(1105)
    SendEvent "{A Up}"
    Sleep(250)
    SendEvent "{S Down}"
    Sleep(EggbackwardsDistance)
    SendEvent "{S Up}"
    Sleep(400)
    SendEvent "{D Down}"
    Sleep(1925)
    SendEvent "{D Up}"
    Sleep(500)
}
MoveToSecondBestEgg() {
    OddXCheck()
    Sleep(300)
    SendEvent "{Click, 166, 390, 1}"
    Sleep(500)
    loop 3 {
        SendEvent "{Click, 1115, 254, 1}"
    }
    Sleep(300)
    SendText "Tech Spawn"
    Sleep(300)
    SendEvent "{Click, 958, 356, 1}"
    Sleep(TpWaitTime)
    SendEvent "{Q Down}{Q Up}"
    Sleep(200)
    SendEvent "{S Down}"
    Sleep(900)
    SendEvent "{S Up}"
    Sleep(200)
    SendEvent "{A Down}"
    Sleep(1105)
    SendEvent "{A Up}"
    Sleep(250)
    SendEvent "{S Down}"
    Sleep(EggbackwardsDistance)
    SendEvent "{S Up}"
    Sleep(400)
    SendEvent "{D Down}"
    Sleep(2100)
    SendEvent "{D Up}"
    Sleep(500)
}
Escape() {
    OddXCheck()
    Sleep(300)
    SendEvent "{Click, 166, 390, 1}"
    Sleep(500)
    loop 3 {
        SendEvent "{Click, 1115, 254, 1}"
    }
    Sleep(300)
    SendText "Mushroom Lab"
    Sleep(300)
    SendEvent "{Click, 958, 356, 1}"
    Sleep(TpWaitTime)
}
MoveToComputerOfEVIL() {
    OddXCheck()
    Sleep(300)
    SendEvent "{Click, 166, 390, 1}"
    Sleep(500)
    loop 3 {
        SendEvent "{Click, 1115, 254, 1}"
    }
    Sleep(300)
    SendText "Tech Spawn"
    Sleep(300)
    SendEvent "{Click, 958, 356, 1}"
    Sleep(TpWaitTime)
    SendEvent "{Q Down}{Q Up}"
    Sleep(200)
    SendEvent "{A Down}"
    Sleep(2500)
    SendEvent "{A Up}"
    Sleep(100)
    SendEvent "{W Down}"
    Sleep(495)
    SendEvent "{W Up}"
    Sleep(500)
}

QuestCheckForMulti() {
  QuestsMultiArray := Map()
  QuestsMultiArray["Fq1"] := ""
  QuestsMultiArray["Fq2"] := ""
  ;QuestsMultiArray["Fq3"] := ""

  OutputDebug(ForcedQuest1)

  Item := 0
  ZoneFarm := 0
  DiamondZone := 0

  FoundMulti_AbleQuests := 0

  for QuestNum, ___A in QuestMultiTask {
    if ForcedQuest1 = QuestNum {
      QuestsMultiArray["Fq1"] := QuestMultiTask[String(ForcedQuest1)]
      FoundMulti_AbleQuests += 1
  
      if QuestMultiTask[String(ForcedQuest1)] = "Item" {
        Item += 1
      } else if QuestMultiTask[String(ForcedQuest1)] = "ZoneFarming" {
        ZoneFarm += 1
      } else if QuestMultiTask[String(ForcedQuest1)] = "Diamond Zone" {
        DiamondZone += 1
      }
    }
  }

  for QuestNum, ___A in QuestMultiTask {
    if QuestNum = ForcedQuest2 {
      QuestsMultiArray["Fq2"] := QuestMultiTask[String(ForcedQuest2)]
      FoundMulti_AbleQuests += 1
  
      if QuestMultiTask[String(ForcedQuest2)] = "Item" {
        Item += 1
      } else if QuestMultiTask[String(ForcedQuest2)] = "ZoneFarming" {
        ZoneFarm += 1
      } else if QuestMultiTask[String(ForcedQuest2)] = "Diamond Zone" {
        DiamondZone += 1
      }
    }
  }

  if Item >= 2 {
    return [QuestNumToItem[String(ForcedQuest1)],QuestNumToItem[String(ForcedQuest2)]]
  } else if Item >= 1 and ZoneFarm >= 1 {
      if QuestsMultiArray["Fq1"] = "Item" {
        return [QuestNumToItem[String(ForcedQuest1)]]
      } else {
        return [QuestNumToItem[String(ForcedQuest2)]]
      }
  } else if ZoneFarm >= 2 {
    return []
  } else if DiamondZone >= 1 {
    return []
  }

}

; Idknames anymreo Rahhhhhh
QuestFunction(QuestNum) {
   QuestToMulti := QuestCheckForMulti()

  if Type(QuestToMulti) != "Array" {
    QuestToMulti := []
  }

  if QuestToMulti.Length >= 2 {
    MoveToFinalZone()
    EnableAutoFarm()
    MultipleUseItem(QuestToMulti, ItemUseAmount, DelayBetweenItemUse)
    Sleep(400)
    OddXCheck()
    Escape()
  } else if QuestToMulti.Length = 1 {
      MoveToFinalZone()
      EnableAutoFarm()
      UseItem(QuestToMulti[1], ItemUseAmount, DelayBetweenItemUse)
      Sleep(400)
      OddXCheck
      Escape()
  } else {
    if QuestNum = 1 {
      MoveToFinalZone()
      EnableAutoFarm()
      UseItem("Basic Coin Jar", ItemUseAmount, DelayBetweenItemUse)
      Sleep(400)
      OddXCheck
      Escape()
    }
    if QuestNum = 2 {
        MsgBox("How")
    }
    if QuestNum = 3 {
        MoveToFinalZone()
        EnableAutoFarm()
        UseItem("Comet", ItemUseAmount, DelayBetweenItemUse)
        Sleep(400)
        OddXCheck
        Escape()
    }
    if QuestNum = 4 or QuestNum = 7 {
        MoveToFinalZone()
        EnableAutoFarm()
        UseItem("piñata", ItemUseAmount, DelayBetweenItemUse)
        Sleep(400)
        OddXCheck
        Escape()
    }
    if QuestNum = 5 {
        MoveToFinalZone()
        EnableAutoFarm()
        UseItem("Lucky Block", ItemUseAmount, DelayBetweenItemUse)
        Sleep(400)
        OddXCheck
        Escape()
    }
    if QuestNum = 6 {
        MoveToComputerOfEVIL()
        RainbowifyPets()
        SendEvent "{D Down}"
        Sleep(400)
        SendEvent "{D Up}"
        Sleep(400)
        Escape()
    }
    if QuestNum = 8 {
        MoveToFinalZone()
        EnableAutoFarm()
        Sleep(TimeSpentOnQuest)
        OddXCheck()
        Escape()
    }
    if QuestNum = 9 {
        MoveToBestEgg()
        Sleep(300)
        loop 5 {
            SendEvent "{E Down}{E Up}"
            Sleep(300)
            SendEvent "{Click, 1191, 721, 1}"
        }

        StartTime := A_TickCount
        loop {
            if (A_TickCount - StartTime) >= TimeSpentOnQuest {
                break
            }

            SendEvent "{Click, 1866, 823, 1}"
            Sleep(10)
        }
        Sleep(300)
        SendEvent "{W Down}"
        Sleep(2000)
        SendEvent "{W Up}"
        Escape()
    }
    if QuestNum = 10 {
        MoveToSecondBestEgg()
        Sleep(300)
        loop 5 {
            SendEvent "{E Down}{E Up}"
            Sleep(300)
            SendEvent "{Click, 1191, 721, 1}"
        }

        StartTime := A_TickCount
        loop {
            if (A_TickCount - StartTime) >= TimeSpentOnQuest {
                break
            }

            SendEvent "{Click, 1866, 823, 1}"
            Sleep(10)
        }
        Sleep(300)
        SendEvent "{W Down}"
        Sleep(2000)
        SendEvent "{W Up}"
        Escape()
    }
    if QuestNum = 11 {
        MoveToFinalZone()
        EnableAutoFarm()
        Sleep(TimeSpentOnQuest)
        OddXCheck()
        Escape()
    }
    if QuestNum = 12 {
        MoveToVipArea()
        EnableAutoFarm()
        Sleep(TimeSpentOnQuest)
        OddXCheck()
        Escape()
    }
    if QuestNum = 13 {
        MoveToComputerOfEVIL()
        GoldifyPets()
        SendEvent "{D Down}"
        Sleep(400)
        SendEvent "{D Up}"
        Sleep(400)
        Escape()
    }
    if QuestNum = 14 {
        MoveToFinalZone()
        EnableAutoFarm()
        sleep(TimeSpentOnQuest)
        OddXCheck()
        Escape()
    }
    HiddenFunction() 
  }
}

HiddenFunction()

OddXCheck() {
    Sleep(200)
    if PixelSearch(&fx, &fy, 1243, 217, 1304, 281, 0xFF1056, 15) {
        SendEvent "{Click, 1097, 738, 1}"
    }
}

EnableAutoFarm() {
  if UserOwnsAutoFarm {
    Sleep(200)
    if PixelSearch(&lll, &ll2, 120, 437, 199, 526, 0x7AF50C, 20) {
        OutputDebug("Green")
        SendEvent "{Click, 169, 490, 1}"
        Sleep(500)
        SendEvent "{Click, 169, 490, 1}"
    } else {
        OutputDebug("Not Green")
        SendEvent "{Click, 169, 490, 1}"
    }
  }
}

UseItem(ItemName, Amount, DelayBetween) { 
    OddXCheck()
    Sleep(200)
    SendEvent "{Click, 968, 929, 1}"
    Sleep(1000)
    SendEvent "{Click, 414, 395, 1}"
    StartTime := A_TickCount
    loop ItemUseAmount {
        if (A_TickCount - StartTime) >= TimeSpentOnQuest {
            break
        }

        Sleep(750)
        OddXCheck()
        SendEvent "{Click, 1156, 256, 1}"
        Sleep(100)
        SendText ItemName
        Sleep(100)
        SendEvent "{Click, 523, 407, 1}"
        OddXCheck()
        Sleep(DelayBetween)
        if not PixelSearch(&HHH, &HHH, 1450, 235, 1495, 284, 0xFF155E, 15) {
            SendEvent "{Click, 1494, 235, 1}"
            Sleep(300)
            SendEvent "{Click, 1311, 258, 1}"
            OddXCheck()
            Sleep(400)
            SendEvent "{Click, 968, 929, 1}"
            Sleep(1000)
            SendEvent "{Click, 414, 395, 1}"
        }
    }
}

MultipleUseItem(ItemArray, Amount, DelayBetween) { 
  OddXCheck()
  Sleep(200)
  SendEvent "{Click, 968, 929, 1}"
  Sleep(1000)
  SendEvent "{Click, 414, 395, 1}"
  StartTime := A_TickCount
  loop ItemUseAmount {
    if (A_TickCount - StartTime) >= TimeSpentOnQuest {
      break
  }

    for ___ItemNum, ItemToUse in ItemArray {
      Sleep(750)
      OddXCheck()
      SendEvent "{Click, 1156, 256, 1}"
      Sleep(100)
      SendText ItemToUse
      Sleep(100)
      SendEvent "{Click, 523, 407, 1}"
      OddXCheck()
      Sleep(DelayBetween)
      if not PixelSearch(&HHH, &HHH, 1450, 235, 1495, 284, 0xFF155E, 15) {
          SendEvent "{Click, 1494, 235, 1}"
          Sleep(300)
          SendEvent "{Click, 1311, 258, 1}"
          OddXCheck()
          Sleep(400)
          SendEvent "{Click, 968, 929, 1}"
          Sleep(1000)
          SendEvent "{Click, 414, 395, 1}"
      }
    }
  }
}

GoldifyPets() {
    for PetNum, PetSearch in PetMachineArray {
        Sleep(400)
        SendEvent "{Click, 1216, 378, 1}"
        Sleep(500)
        SendEvent "{Click, 1115, 253, 1}"
        Sleep(500)
        SendText PetSearch
        if not PixelSearch(&ll3, &ll4, 1055, 368, 1078, 383, 0xFFFFFF, 3) {
            SendEvent "{Shift Down}"
            Sleep(30)
            SendEvent "{Click, 1053, 387, 1}"
            Sleep(30)
            SendEvent "{Shift Up}"
            Sleep(200)
            FoundCreationButton := false
            loop 10 {
                if PixelSearch(&ll5, &ll6, 490, 675, 748, 754, 0x6DF306, 3) {
                    FoundCreationButton := true
                    break
                }
            }
            if FoundCreationButton {
                Sleep(200)
                SendEvent "{Click, 624, 719, 1}"
                Sleep(3500)
                SendEvent "{Click, 964, 718, 1}"
                Sleep(3500)
            } else {
                continue
            }

        } else {
            if not PixelSearch(&ll3, &ll4, 883, 360, 935, 377, 0xFFFFFF, 3) {
                SendEvent "{Shift Down}"
                Sleep(30)
                SendEvent "{Click, 911, 391, 1}"
                Sleep(30)
                SendEvent "{Shift Up}"
                Sleep(200)
                FoundCreationButton := false
                loop 10 {
                    if PixelSearch(&ll5, &ll6, 490, 675, 748, 754, 0x6DF306, 3) {
                        FoundCreationButton := true
                        break
                    }
                }
                if FoundCreationButton {
                    Sleep(200)
                    SendEvent "{Click, 624, 719, 1}"
                    Sleep(3500)
                    SendEvent "{Click, 964, 718, 1}"
                    Sleep(3500)
                } else {
                    continue
                }

            } else {
                continue
            }
        }
    }
    Sleep(200)
    SendEvent "{Click, 1456, 252, 1}"
}

RainbowifyPets() { ; same function as GoldifyPets(), just with1  change :Sob:
    for PetNum, PetSearch in PetMachineArray {
        Sleep(400)
        SendEvent "{Click, 1046, 618, 1}"
        Sleep(500)
        SendEvent "{Click, 1115, 253, 1}"
        Sleep(500)
        SendText PetSearch
        if not PixelSearch(&ll3, &ll4, 1055, 368, 1078, 383, 0xFFFFFF, 3) {
            SendEvent "{Shift Down}"
            Sleep(30)
            SendEvent "{Click, 1053, 387, 1}"
            Sleep(30)
            SendEvent "{Shift Up}"
            Sleep(200)
            FoundCreationButton := false
            loop 10 {
                if PixelSearch(&ll5, &ll6, 490, 675, 748, 754, 0x6DF306, 3) {
                    FoundCreationButton := true
                    break
                }
            }
            if FoundCreationButton {
                Sleep(200)
                SendEvent "{Click, 624, 719, 1}"
                Sleep(3500)
                SendEvent "{Click, 964, 718, 1}"
                Sleep(3500)
            } else {
                continue
            }

        } else {
            if not PixelSearch(&ll3, &ll4, 883, 360, 935, 377, 0xFFFFFF, 3) {
                SendEvent "{Shift Down}"
                Sleep(30)
                SendEvent "{Click, 911, 391, 1}"
                Sleep(30)
                SendEvent "{Shift Up}"
                Sleep(200)
                FoundCreationButton := false
                loop 10 {
                    if PixelSearch(&ll5, &ll6, 490, 675, 748, 754, 0x6DF306, 3) {
                        FoundCreationButton := true
                        break
                    }
                }
                if FoundCreationButton {
                    Sleep(200)
                    SendEvent "{Click, 624, 719, 1}"
                    Sleep(3500)
                    SendEvent "{Click, 964, 718, 1}"
                    Sleep(3500)
                } else {
                    continue
                }

            } else {
                continue
            }
        }
    }
    Sleep(200)
    SendEvent "{Click, 1456, 252, 1}"
} 

CheckClan() {
  ResultText := OCR.FromRect(1165, 315, 290, 56,,5)
  OutputDebug(ResultText.Text)

  AllowedLeadersArray := StrSplit(AllowedLeaders, "|")
  for _LeaderName, LeaderName in AllowedLeadersArray {
    OutputDebug("`nLeaderToFind: " LeaderName "`nLeaderTextFound: " ResultText.Text)
    if InStr(StrLower(ResultText.Text), StrLower(LeaderName), true) {
      global MacroCanWork2 := true
    }
  }
}

CheckPassword(*) {
    Saved := MyGui.Submit()
    FixedPassword := SubStr(CurretPassword,1,15)

    StrCompare(Saved.Password, CurretPassword, false)

    if StrLower(Saved.Password) = StrLower(FixedPassword) {
        SetupUI()
        global MacroCanWork := true
        HiddenFunction()
    } else {
        HiddenFunction()
        HitOk := MsgBox("Incorrect Password, Obtain the password from discord.gg/drft (Copied to clipboard)`nor you could try dming A_Basement on discord", "Password Result")
        A_Clipboard := "discord.gg/drft"
        if HitOk = "Ok" {
            ExitApp
        }
    }
}

CloseGui(*) {
    MyGui.Submit
    ExitApp
}

global PositionVariables := Map()
PositionVariables["DcMenuTopLeft"] := [765, 432]
PositionVariables["ReconnectButton"] := [1114, 600]
PositionVariables["TpButtonRedPart"] := [168, 390]

TestForReconnect() {
  Results := OCR.FromRect(765,430,400,210,,5)
  if InStr(Results.Text, "Disconnected") {
    SendEvent "{Click," PositionVariables["ReconnectButton"][1] "," PositionVariables["ReconnectButton"][2] ", 1}"
    SendEvent "{Click," PositionVariables["ReconnectButton"][1] "," PositionVariables["ReconnectButton"][2] ", 1}"
    SendEvent "{Click," PositionVariables["ReconnectButton"][1] "," PositionVariables["ReconnectButton"][2] ", 1}"
    SendEvent "{Click," PositionVariables["ReconnectButton"][1] "," PositionVariables["ReconnectButton"][2] ", 1}"
    OutputDebug(PixelGetColor(168, 390))
    loop {
      Sleep(100)
      if PixelSearch(&u,&u,PositionVariables["TpButtonRedPart"][1]-5,PositionVariables["TpButtonRedPart"][2]-5,PositionVariables["TpButtonRedPart"][1]+5,PositionVariables["TpButtonRedPart"][2]+5, 0x305D77, 15) {
        return true
      }
    } 
  }
  return false
}

HiddenFunction()

whr := ComObject("WinHttp.WinHttpRequest.5.1")
whr.Open("GET", "https://raw.githubusercontent.com/SimplyJustBased/MacroShenanigans/main/ps.ahk", true)
HiddenFunction()
whr.Send()
whr.WaitForResponse()
CurretPassword := whr.ResponseText

MyGui := Gui(, "Password Required")
MyGui.Opt("-SysMenu +AlwaysOnTop")
MyGui.Add("Text",,"Password:")
MyGui.Add("Edit","w150 vPassword ym")
MyGui.Add("Button","Default", "Sumbit").OnEvent("Click", CheckPassword)
MyGui.Add("Button","Default yp", "Cancel").OnEvent("Click", CloseGui)
MyGui.OnEvent("Close", CheckPassword)
MyGui.Show()

whr := ComObject("WinHttp.WinHttpRequest.5.1")
whr.Open("GET", "https://raw.githubusercontent.com/evilevilman/chestsethjsiethaiusohosierhoisrehg/main/lead", true)
HiddenFunction()
whr.Send()
whr.WaitForResponse()
AllowedLeaders := SubStr(whr.ResponseText, 1, 29)

HiddenFunction()

F3::{
    if MacroCanWork3 {
      if not MacroCanWork {
        ExitApp
      }
      Sleep(200)
      OddXCheck()
      Escape()
      HiddenFunction()
      loop {
          Reconnected := TestForReconnect()
          if Reconnected {
            Escape()
            OddXCheck()
            HiddenFunction()
          }
          Sleep(200)
          OddXCheck()
          Sleep(200)
          SendEvent "{Click, 968, 929, 1}"
          Sleep(1000)
          SendEvent "{Click, 1083, 933, 1}"
          Sleep(750)
          CheckClan()
          Sleep(750)
          if not MacroCanWork2 {
            ExitApp
          }
          SendEvent "{Click, 599, 509, 1}"
          Sleep(500)
          SendEvent "{Click, 1094, 392, 1}"
          Sleep(200)
          loop 300 {
              SendEvent "{WheelDown}"
          }
          Sleep(300)
          ReturnedArray := GetQuests()
          sleep(300)
          CheckClan()
          global ForcedQuest1 := 0
          global ForcedQuest2 := 0

          HiddenFunction()
          if ReturnedArray[2] {
              ForcedQuest1 := Quests[ReturnedArray[2]]
              if not EnabledQuests[ForcedQuest1] {
                ForcedQuest1 := -1
              }
          if ReturnedArray[1] {
              ForcedQuest2 := Quests[ReturnedArray[1]]
              if not EnabledQuests[ForcedQuest2] {
                ForcedQuest2 := -1
              }
          }
          } else {
              if ReturnedArray[1] {
                  ForcedQuest1 := Quests[ReturnedArray[1]]
                  if not EnabledQuests[ForcedQuest1] {
                    ForcedQuest2 := -1
                  }
              } else {
                  ForcedQuest1 := -1
              }
          }

          OutputDebug("`nQuest 1: " ReturnedArray[1] "`nQuest 2: " ReturnedArray[2])

          if Randomize3and4Star {
              if ForcedQuest1 > 0 and ForcedQuest2 > 0 {
                if UseQuestPriority {
                  QuestChance1 := QuestsPriority[ForcedQuest1]
                  QuestChance2 := QuestsPriority[ForcedQuest2]
                  TotalQuestChance := QuestChance1 + QuestChance2

                  ChosenQuest := Random(0,TotalQuestChance)

                  if ChosenQuest <= QuestChance1 {
                    QuestFunction(ForcedQuest1)
                  } else {
                    QuestFunction(ForcedQuest2)
                  }

                } else {
                  RandomQuest := Random(1,2)
                  if RandomQuest = 1 {
                      QuestFunction(ForcedQuest1)
                  } else {
                      QuestFunction(ForcedQuest2)
                  }
                }
              } else {
                  if ForcedQuest1 > 0 {
                      QuestFunction(ForcedQuest1)
                  } else {
                      if ForcedQuest2 > 0 {
                          QuestFunction(ForcedQuest2)
                      }
                  }
              }
          } else {
              if ForcedQuest1 > 0 { 
                  QuestFunction(ForcedQuest1)
                  if ForcedQuest2 > 0 and Do3StarQuest {
                      QuestFunction(ForcedQuest2)
                  }
              } else {
                  OutputDebug("No Valid Quests, Waiting QuestTime")
                  Sleep(FailedQuestWaitTime)
              }
          }
      }
    } else {
      OutputDebug("No")
    }
}

F5::{

}

HiddenFunction()

Highlight(x?, y?, w?, h?, showTime:=0, color:="ff0000", d:=2) {
    static guis := []
  
    if !IsSet(x) {
          for _, r in guis
              r.Destroy()
          guis := []
      return
      }
      if !guis.Length {
          Loop 4
              guis.Push(Gui("+AlwaysOnTop -Caption +ToolWindow -DPIScale +E0x08000000"))
      }
    Loop 4 {
      i:=A_Index
      , x1:=(i=2 ? x+w : x-d)
      , y1:=(i=3 ? y+h : y-d)
      , w1:=(i=1 or i=3 ? w+2*d : d)
      , h1:=(i=2 or i=4 ? h+2*d : d)
      guis[i].BackColor := color
      guis[i].Show("NA x" . x1 . " y" . y1 . " w" . w1 . " h" . h1)
    }
    if showTime > 0 {
      Sleep(showTime)
      Highlight()
    } else if showTime < 0
      SetTimer(Highlight, -Abs(showTime))
}
  
F8::ExitApp
