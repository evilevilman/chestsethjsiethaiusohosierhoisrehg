; Script by A_Basement / https://discord.com/invite/JrwB6jVxkR
; DRFT Exclusive Macro (Hopefully)
VersionNum := "1.045"

#Requires AutoHotkey v2.0 
#Include UWBOCRLib.ahk
#SingleInstance Force
CoordMode "Mouse", "Screen"
SetMouseDelay -1

OffSetX := 10 ;68
OffsetY := 10 ;174
SwitchChange := false
SizeX := 290 ;186
SizeY := 440 ;28
PushNum := 2

global Quests := Map()
Quests["Coin Jars"] := "1"
Quests["Comets"] := "3"
Quests["pinatas"] := "4"
Quests["Lucky Block"] := "5"
Quests["Rainbow Pets"] := "6"
Quests["Pinfiata"] := "7"
Quests["Breakables"] := "8"
Quests["Best Eggs"] := "9"
Quests["rare"] := "10"
Quests["k Diamonds"] := "11"
Quests["diamond breakables"] := "12"
Quests["golden"] := "13"
Quests["Mini"] := "14"

global EnabledQuests := Map()
EnabledQuests["4"] := true
EnabledQuests["7"] := true
EnabledQuests["12"] := true
EnabledQuests["9"] := true
EnabledQuests["10"] := true
EnabledQuests["5"] := true
EnabledQuests["3"] := true
EnabledQuests["1"] := true
EnabledQuests["14"] := true
EnabledQuests["11"] := true
EnabledQuests["8"] := true
EnabledQuests["13"] := true
EnabledQuests["6"] := true

global QuestsToText := Map()
QuestsToText["4"] := "Use Pi単atas"
QuestsToText["7"] := "Use Pi単atas (Secondary Check)"
QuestsToText["12"] := "Diamond Breakables"
QuestsToText["9"] := "Open Best Egg"
QuestsToText["10"] := "Hatch Rare Pets"
QuestsToText["5"] := "Use Lucky Blocks"
QuestsToText["3"] := "Use Comets"
QuestsToText["1"] := "Use Coin Jars"
QuestsToText["14"] := "Break Minichests"
QuestsToText["11"] := "Earn Diamonds"
QuestsToText["8"] := "Break Breakables"
QuestsToText["13"] := "Make Pets Golden"
QuestsToText["6"] := "Make Pets Rainbow"
QuestsToText["-1"] := "Disabled Quest / Unable To Do Quest"

global QuestsPriority := Map()
QuestsPriority["4"] := "100"
QuestsPriority["7"] := "100"
QuestsPriority["12"] := "90"
QuestsPriority["9"] := "50"
QuestsPriority["10"] := "50"
QuestsPriority["5"] := "20"
QuestsPriority["3"] := "20"
QuestsPriority["1"] := "20"
QuestsPriority["14"] := "10"
QuestsPriority["11"] := "10"
QuestsPriority["8"] := "10"
QuestsPriority["13"] := "5"
QuestsPriority["6"] := "5"

global QuestMultiTask := Map()
QuestMultiTask["4"] := "Item"
QuestMultiTask["7"] := "Item"
QuestMultiTask["12"] := "Diamond Zone"
QuestMultiTask["9"] := "Egg"
QuestMultiTask["10"] := "Egg"
QuestMultiTask["5"] := "Item"
QuestMultiTask["3"] := "Item"
QuestMultiTask["1"] := "Item"
QuestMultiTask["14"] := "ZoneFarming"
QuestMultiTask["11"] := "ZoneFarming"
QuestMultiTask["8"] := "ZoneFarming"

global QuestNumToItem := Map()
QuestNumToItem["4"] := "pi単ata"
QuestNumToItem["7"] := "pi単ata"
QuestNumToItem["3"] := "Comet"
QuestNumToItem["5"] := "Lucky Block"
QuestNumToItem["1"] := "Basic Coin Jar"

global ProfessionalQuestsMap := Map()
ProfessionalQuestsMap["27"] := "-1" ; Ice Obby
ProfessionalQuestsMap["46"] := "-1" ; Catch Fish
ProfessionalQuestsMap["34"] := "-1" ; Use T4 Pots
ProfessionalQuestsMap["38"] := "3" ; Comets
ProfessionalQuestsMap["40"] := "13" ; Golden Pets
ProfessionalQuestsMap["44"] := "5" ; Lucky blcoks
ProfessionalQuestsMap["21"] := "8" ; breakables in best area
ProfessionalQuestsMap["39"] := "14" ; minichests
ProfessionalQuestsMap["7"] := "11" ; Earn Diamonds
ProfessionalQuestsMap["37"] := "1" ; Coin Jars
ProfessionalQuestsMap["43"] := "4" ; Pinatas
ProfessionalQuestsMap["42"] := "10" ; Hatch Rare Pets
ProfessionalQuestsMap["9"] := "12" ; Break Diamond Breakables
ProfessionalQuestsMap["41"] := "6" ; Rainbow
ProfessionalQuestsMap["20"] := "9" ; Best Egg
ProfessionalQuestsMap["12"] := "-1" ; T3
ProfessionalQuestsMap["45"] := "-1" ; Chests advanced digsite
ProfessionalQuestsMap["13"] := "-1" ; what


global TpWaitTime := 7000
global FailedQuestWaitTime := 120000
global TimeSpentOnQuest := 120000
global Do3StarQuest := false
global Randomize3and4Star := true

global ItemUseAmount := 10
global DelayBetweenItemUse := 5500

global PetMachineArray := ["Bleebo The Alien", "alien parasite", "alien axolotl"]
global EggbackwardsDistance := 1025
global CurrentZone := "106"

global PotionsArray := ["Damage", "Coins", "Lucky Eggs"]
global UseQuestPriority := true
global MultiTaskQuests := true
global UserOwnsAutoFarm := true

global StartingMessage := true
global MacroCanWork := false
global MacroCanWork2 := false
global MacroCanWork3 := false

global CLANNAME := "DRFT"
global QuestAPICallDelay := 30000
global AutoReconnectCheckDelay := 30000
global UseUltimate := true
global A_GetQuestsTimer := A_TickCount

global LQ3 := "100"
global LQ4 := "100"

global Q3 := "-1"
global Q4 := "-1"

global LQUT := A_TickCount
global CurrentQuest := "nil"

GetQuestsOLD() {
    FirstQuest := ""
    SecondQuest := ""

     
    Result1 := Ocr.FromRect(778, 500, 415, 40,,5)
    Result2 := Ocr.FromRect(778, 630, 415, 40,,5)
     
    ; OutputDebug("`n Quest1: " Result1.Text)
    ; OutputDebug("`n Quest2: " Result2.Text)

    for QuestFind, QuestValue in Quests {
        if InStr(StrLower(Result1.Text), StrLower(QuestFind), false) {
            ; OutputDebug("`nFound TrueQuest1 : " QuestFind)
            FirstQuest := QuestFind
        }
        if InStr(StrLower(Result2.Text), StrLower(QuestFind), false) {
            ; OutputDebug("`nFound TrueQuest2 : " QuestFind)
            SecondQuest := QuestFind
        }
    }

    return [FirstQuest, SecondQuest]
}

GetQuests() {
  whr := ComObject("WinHttp.WinHttpRequest.5.1")
  whr.Open("GET", "https://biggamesapi.io/api/clan/" CLANNAME, true)
  whr.Send()
  whr.WaitForResponse()
  CurretPassword := whr.ResponseText
  global LQUT := A_TickCount

  LoadedArray := Jxon_Load(&CurretPassword)

  for _ArrayNum, BattleArray in LoadedArray["data"]["Battles"]["GoalBattleOne"]["Goals"] {
    if BattleArray["Stars"] = 300 {
      QuestNum := String(ProfessionalQuestsMap[String(BattleArray["Type"])])

      for QuestType, QuestTrueNum in Quests {
        if QuestNum = QuestTrueNum {
          if not EnabledQuests[QuestTrueNum] {
            global Q3 := -1
          } else {
            global Q3 := QuestNum
          }
          if Q3 > 0 {
            OutputDebug("`n Quest Confirmed: " QuestsToText[Q3] "   [Q3]")
          } else {
            OutputDebug("`n Quest UnConfirmed: " Q3 "   [Q3]")
          }
        }
      } 
    }
    if BattleArray["Stars"] = 400 {
      QuestNum := String(ProfessionalQuestsMap[String(BattleArray["Type"])])

      for QuestType, QuestTrueNum in Quests {
        if QuestNum = QuestTrueNum {
          if not EnabledQuests[QuestTrueNum] {
            global Q4 := -1
          } else {
            global Q4 := QuestNum
          }
          if Q4 > 0 {
            OutputDebug("`n Quest Confirmed: " QuestsToText[Q4] "   [Q4]")
          } else {
            OutputDebug("`n Quest UnConfirmed: " Q4 "   [Q4]")
          }
        }
      } 
    }
  }

  if LQ3 != Q3 or LQ4 != Q4 {
    global LQ3 := Q3
    global LQ4 := Q4
    return true
  } else {
    return false
  }
}

LoadSettings()
QuestUi := Gui()
ChangelogsUI := Gui()

SetupUI() {
  Tabs := QuestUi.AddTab3("Choose1", ["Main", "Togglable Settings", "Quest Toggles", "Quest Priority", "ChangeLogs"])

  SetDarkWindowFrame(hwnd, boolEnable:=1) {
      hwnd := WinExist(hwnd)
      if VerCompare(A_OSVersion, "10.0.17763") >= 0
          attr := 19
      if VerCompare(A_OSVersion, "10.0.18985") >= 0
          attr := 20
      DllCall("dwmapi\DwmSetWindowAttribute", "ptr", hwnd, "int", attr, "int*", boolEnable, "int", 4)
  }

  QuestUi.Opt("-SysMenu +AlwaysOnTop +Caption")
  SetDarkWindowFrame(QuestUi)
  QuestUi.SetFont("s15 q5 w700", "Ink Free")
  QuestUi.Add("Text","Section cff6f00","Clan Quest Macro V" VersionNum)
  QuestUi.SetFont("s11 w400",  "Arial")
  QuestUi.Add("Text","Section Cblack w250 Wrap","Macro Made by @A_Basement")
  QuestUi.Add("Text","Section Cblack w250 Wrap","A Little Info Before you run the macro:")
  QuestUi.SetFont("s9 w400",  "Arial")
  QuestUi.Add("Text","Section Cblack w250 Wrap", "F3 To start`nF8 To Stop`nMake Sure you turn autohatch on before starting`nDO NOT MOVE YOUR CAMERA FROM BASE POSITION FROM WHEN YOU FIRST JOIN THE GAME`nNO SHINY HOVERBOARD!!!")
  QuestUi.SetFont("s11 w400",  "Arial")
  QuestUi.Add("Text","Section Cblack w250 Wrap","Check out my YT and Discord with the buttons below!")
  QuestUi.Add("Button","xs y380","Enable Macro").OnEvent("Click", EnableMacro)
  QuestUi.Add("Button","yp","Join the Discord").OnEvent("Click", JoinDiscordButton)
  QuestUi.Add("Button","yp","Youtube Channel").OnEvent("Click", YTButton)

  Tabs.UseTab(2)
  QuestUi.SetFont("s15 q5 w700", "Arial")
  QuestUi.Add("Text","Section c000000","Toggleable Settings")
  ; Do shit here later lmao global Randomize3and4Star := true
  QuestUi.SetFont("s9 w400",  "Arial")
  QuestUi.Add("Text","Section","`"Randomize3and4Star`":")
  QuestUi.Add("Checkbox","x390 VRandomize3and4StarUIValue yp Checked" Randomize3and4Star)

  QuestUi.Add("Text","Section xs","`"UseQuestPriority`":")
  QuestUi.Add("Checkbox","x390 VUseQuestPriorityUIValue yp Checked" UseQuestPriority)

  QuestUi.Add("Text","Section xs","`"MultiTaskQuests`":")
  QuestUi.Add("Checkbox","x390 VMultiTaskQuestsUIValue yp Checked" MultiTaskQuests)

  QuestUi.Add("Text","Section xs","`"UserOwnsAutoFarm`":")
  QuestUi.Add("Checkbox","x390 VUserOwnsAutoFarmUIValue yp Checked" UserOwnsAutoFarm)

  QuestUi.Add("Text","Section xs","`"UseUltimate`":")
  QuestUi.Add("Checkbox","x390 VUseUltimateUIValue yp Checked" UseUltimate)

  QuestUi.Add("Text","Section xs w250 Wrap", "`"QuestAPICallDelay`" (How Much Time Before Checking API For New Quests [IN MILISECONDS])")
  QuestUi.Add("Edit", "x305 w100 h20 yp")
  QuestUi.AddUpDown("VQuestAPICallDelayUIValue Range1-9999999999999", QuestAPICallDelay)

  QuestUi.Add("Text","Section xs w250 Wrap", "`"DelayBetweenItemUse`" (Delay between using items from item quests[IN MILISECONDS])")
  QuestUi.Add("Edit", "x305 w100 h20 yp")
  QuestUi.AddUpDown("VDelayBetweenItemUseValue Range1-9999999999999", DelayBetweenItemUse)

  QuestUi.Add("Text","Section xs w250 Wrap", "`"AutoReconnectCheckDelay`" (How Much Time Before Checking If Needed to Reconnect [IN MILISECONDS])")
  QuestUi.Add("Edit", "x305 w100 h20 yp")
  QuestUi.AddUpDown("VAutoReconnectCheckDelayUIValue Range1-9999999999999", AutoReconnectCheckDelay)

  QuestUi.Add("Text","Section xs w250 Wrap", "`"CLANNAME`" (Required to get Correct Quests)")
  QuestUi.Add("Edit", "x305 w100 h20 yp VCLANNAMEUIValue", CLANNAME)

  Tabs.UseTab(3)
  QuestUi.SetFont("s15 q5 w700", "Arial")
  QuestUi.Add("Text","Section c000000","Quest Toggles")
  QuestUi.SetFont("s9 q5 w700", "Arial")

  for QuestNum, QuestText in QuestsToText {
    if Number(QuestNum) > 0 {
      QuestUi.Add("Text","Section xs",QuestText ":")
      QuestUi.Add("Checkbox","x390 V" QuestNum "EnabledUIValue yp Checked" EnabledQuests[QuestNum])
    }
  } 

  Tabs.UseTab(4)
  QuestUi.SetFont("s15 q5 w700", "Arial")
  QuestUi.Add("Text","Section c000000","Quest Priority")
  QuestUi.SetFont("s9 q5 w700", "Arial")

  for QuestNum, QuestText in QuestsToText {
    if Number(QuestNum) > 0 {
      QuestUi.Add("Text","Section xs",QuestText ":")
      QuestUi.Add("Edit","x350 w60 h20 yp")
      QuestUi.AddUpDown("V" QuestNum "PriorityUIValue Range1-1000", QuestsPriority[QuestNum])
    }
  } 
  
  ChangelogsUI.Opt("+AlwaysOnTop +Caption")
  ShowChangeLogs(*) {
    ChangelogsUI.Show
  }
  
  Tabs.UseTab(5)
  QuestUi.Add("Button",,"View Changelogs").OnEvent("Click", ShowChangeLogs)

  ChangelogsUI.SetFont("s15 q5 w700", "Arial")
  ChangelogsUI.Add("Text","Section c000000","ChangeLogs")
  ChangelogsUI.SetFont("s10 q5 w700", "Arial")
  ChangelogsUI.Add("Text","Section c000000 w350 Wrap","V1.045:`n>Fixed 1.04 Crashing Pcs (Hopefully)`n>Multitask Improved: Eggs + Zone and Eggs + Diamond Breakables`n>New Variable in togglesettings`n>Fixes broken RAHGG")
  ChangelogsUI.Add("Text","Section c000000 w350 Wrap","V1.04:`n>Bug Fixes for 1.03`n>Removed OCR Quest Check`n>API Quest Check Added`n>Quests Now Stop When A New Quest is Detected`n>Several Variables / Features Added`n>Auto UseUltimate Added")
  ChangelogsUI.Add("Text","Section c000000 w350 Wrap","V1.03:`n>Quest Priority Added`n>More Settings Added`n>Quest Multitasking Added")
  ChangelogsUI.Add("Text","Section c000000 w350 Wrap","V1.02:`n>Gui Added`n>Auto Reconnect Added`n>Some Toggleable Settings Added")

  ChangelogsUI.SetFont("s14 q5 w700", "Arial")
  ChangelogsUI.Add("Text","Section c000000","To Do:")
  ChangelogsUI.SetFont("s10 q5 w700", "Arial")
  ChangelogsUI.Add("Text","Section c000000 w250 Wrap",">Add Better Item Use Function`n>Add Missing Quests`n>Allow For Quests 1-2`n>World 1 Quest Support`n>Add Settings for everything else`n>For Firez to pay me :)`n>Make it pop party boxes when no item")

  QuestUi.Show()
}

EnableMacro(*) {
  SumbitValues := QuestUi.Submit()
  ChangelogsUI.Submit()
  global MacroCanWork3 := true
  UpdateSettings(SumbitValues)
  SaveSettings()
}

JoinDiscordButton(*) {
  Run "https://discord.com/invite/JrwB6jVxkR"
}

YTButton(*) {
  Run "https://www.youtube.com/channel/UCKOkQGvHO71nqQjwTiJX5Ww"
}

ObjToMap(Obj, Depth:=5, IndentLevel:="")
{
	if Type(Obj) = "Object"
		Obj := Obj.OwnProps()
    if Type(Obj) = "String" {
      Obj := [Obj]
    }
	for k,v in Obj
	{
		List.= IndentLevel k
		if (IsObject(v) && Depth>1)
			List.="`n" ObjToMap(v, Depth-1, IndentLevel . "    ")
		Else
			List.=":" v
		List.="/\"
	}
	
  NewMap := Map()
  SplitArray := StrSplit(List, "/\")
  for __ArrayNum, SplitText in SplitArray {
    ValueSplit := StrSplit(SplitText, ":")
    
    if InStr(SplitText, ":") {
      NewMap[ValueSplit[1]] := ValueSplit[2]
    }
  }

  return NewMap
}

LoadSettings() {
  if not FileExist("VersionSettings.ini") {
    SaveSettings()
  } else {
    OutputDebug(IniRead("VersionSettings.ini", "Version", "Interesting"))
    if String(IniRead("VersionSettings.ini", "Version", "Interesting")) != String(VersionNum) {
      OutputDebug("F")
      SaveSettings()
    }
  }

  if FileExist("CQMSettings.ini") {
    global Randomize3and4Star := IniRead("CQMSettings.ini", "ToggleSettings", "Randomize3and4Star")
    global UseQuestPriority := IniRead("CQMSettings.ini", "ToggleSettings", "UseQuestPriority")
    global UserOwnsAutoFarm := IniRead("CQMSettings.ini", "ToggleSettings", "UserOwnsAutoFarm")
    global MultiTaskQuests := IniRead("CQMSettings.ini", "ToggleSettings", "MultiTaskQuests")
    global QuestAPICallDelay := IniRead("CQMSettings.ini", "ToggleSettings", "QuestAPICallDelay")
    global CLANNAME := IniRead("CQMSettings.ini", "ToggleSettings", "CLANNAME")
    global AutoReconnectCheckDelay := IniRead("CQMSettings.ini", "ToggleSettings", "AutoReconnectCheckDelay")
    global UseUltimate := IniRead("CQMSettings.ini", "ToggleSettings", "UseUltimate")
    global DelayBetweenItemUse := IniRead("CQMSettings.ini", "ToggleSettings", "DelayBetweenItemUse")

    for QuestNum, __QuestPriority in QuestsPriority {
      QuestsPriority[QuestNum] := IniRead("CQMSettings.ini", "QuestsPriority", QuestNum)
    }

    for QuestNum, __IsQuestEnabled in EnabledQuests {
      EnabledQuests[QuestNum] := IniRead("CQMSettings.ini", "EnabledQuests", QuestNum)
    }
  } else {
    SaveSettings()
  }
}

UpdateSettings(SumbitValues) {
  global Randomize3and4Star := SumbitValues.Randomize3and4StarUIValue
  global UseQuestPriority := SumbitValues.UseQuestPriorityUIValue
  global UserOwnsAutoFarm := SumbitValues.UserOwnsAutoFarmUIValue
  global MultiTaskQuests := SumbitValues.MultiTaskQuestsUIValue
  global QuestAPICallDelay := SumbitValues.QuestAPICallDelayUIValue
  global CLANNAME := SumbitValues.CLANNAMEUIValue
  global AutoReconnectCheckDelay := SumbitValues.AutoReconnectCheckDelayUIValue
  global UseUltimate := SumbitValues.UseUltimateUIValue
  global DelayBetweenItemUse := SumbitValues.DelayBetweenItemUseValue

  FixedSubmitValues := ObjToMap(SumbitValues)

  for QuestNum, __QuestPriority in QuestsPriority {
    QuestsPriority[QuestNum] := FixedSubmitValues[QuestNum "PriorityUIValue"]
  }

  for QuestNum, __IsQuestEnabled in EnabledQuests {
    EnabledQuests[QuestNum] := FixedSubmitValues[QuestNum "EnabledUIValue"]
  }
}

SaveSettings() {
  IniWrite(Randomize3and4Star, "CQMSettings.ini", "ToggleSettings", "Randomize3and4Star")
  IniWrite(UseQuestPriority, "CQMSettings.ini", "ToggleSettings", "UseQuestPriority")
  IniWrite(UserOwnsAutoFarm, "CQMSettings.ini", "ToggleSettings", "UserOwnsAutoFarm")
  IniWrite(MultiTaskQuests, "CQMSettings.ini", "ToggleSettings", "MultiTaskQuests")
  IniWrite(QuestAPICallDelay, "CQMSettings.ini", "ToggleSettings", "QuestAPICallDelay")
  IniWrite(CLANNAME, "CQMSettings.ini", "ToggleSettings", "CLANNAME")
  IniWrite(AutoReconnectCheckDelay, "CQMSettings.ini", "ToggleSettings", "AutoReconnectCheckDelay")
  IniWrite(UseUltimate, "CQMSettings.ini", "ToggleSettings", "UseUltimate")
  IniWrite(DelayBetweenItemUse, "CQMSettings.ini", "ToggleSettings", "DelayBetweenItemUse")

  for QuestNum, QuestPriorityNum in QuestsPriority {
    IniWrite(QuestPriorityNum, "CQMSettings.ini", "QuestsPriority", QuestNum)
  }

  for QuestNum, Enabler in EnabledQuests {
    IniWrite(Enabler, "CQMSettings.ini", "EnabledQuests", QuestNum)
  }
  
  IniWrite(VersionNum, "VersionSettings.ini", "Version", "Interesting")
}

; Movement Functions
MoveToFinalZone() {
    OddXCheck()
    Sleep(300)
    SendEvent "{Click, 166, 390, 1}"
    Sleep(500)
    loop 3 {
        SendEvent "{Click, 1115, 254, 1}"
    }
    Sleep(300)
    SendText "Alien Lab"
    Sleep(300)
    SendEvent "{Click, 958, 356, 1}"
    Sleep(TpWaitTime)
    SendEvent "{Q Down}{Q Up}"
    Sleep(100)
    SendEvent "{S Down}"
    Sleep(650)
    SendEvent "{S Up}"
    global CurrentZone := "149"
}
MoveToVipArea() {
    OddXCheck()
    Sleep(300)
    SendEvent "{Click, 166, 390, 1}"
    Sleep(500)
    loop 3 {
        SendEvent "{Click, 1115, 254, 1}"
    }
    Sleep(300)
    SendText "Tech Spawn"
    Sleep(300)
    SendEvent "{Click, 958, 356, 1}"
    Sleep(TpWaitTime)
    SendEvent "{Q Down}{Q Up}"
    Sleep(100)
    SendEvent "{W Down}"
    Sleep(100)
    SendEvent "{W Up}"
    Sleep(200)
    SendEvent "{A Down}"
    Sleep(3500)
    SendEvent "{A Up}"
    Sleep(500)
    SendEvent "{W Down}"
    Sleep(500)
    SendEvent "{W Up}"
    Sleep(200)
    SendEvent "{A Down}"
    Sleep(2000)
    SendEvent "{A Up}"
    global CurrentZone := "100"
}
MoveToBestEgg() {
    OddXCheck()
    Sleep(300)
    SendEvent "{Click, 166, 390, 1}"
    Sleep(500)
    loop 3 {
        SendEvent "{Click, 1115, 254, 1}"
    }
    Sleep(300)
    SendText "Tech Spawn"
    Sleep(300)
    SendEvent "{Click, 958, 356, 1}"
    Sleep(TpWaitTime)
    SendEvent "{Q Down}{Q Up}"
    Sleep(200)
    SendEvent "{S Down}"
    Sleep(900)
    SendEvent "{S Up}"
    Sleep(200)
    SendEvent "{A Down}"
    Sleep(1105)
    SendEvent "{A Up}"
    Sleep(250)
    SendEvent "{S Down}"
    Sleep(EggbackwardsDistance)
    SendEvent "{S Up}"
    Sleep(400)
    SendEvent "{D Down}"
    Sleep(1925)
    SendEvent "{D Up}"
    Sleep(500)
    global CurrentZone := "100"
}
MoveToSecondBestEgg() {
    OddXCheck()
    Sleep(300)
    SendEvent "{Click, 166, 390, 1}"
    Sleep(500)
    loop 3 {
        SendEvent "{Click, 1115, 254, 1}"
    }
    Sleep(300)
    SendText "Tech Spawn"
    Sleep(300)
    SendEvent "{Click, 958, 356, 1}"
    Sleep(TpWaitTime)
    SendEvent "{Q Down}{Q Up}"
    Sleep(200)
    SendEvent "{S Down}"
    Sleep(900)
    SendEvent "{S Up}"
    Sleep(200)
    SendEvent "{A Down}"
    Sleep(1105)
    SendEvent "{A Up}"
    Sleep(250)
    SendEvent "{S Down}"
    Sleep(EggbackwardsDistance)
    SendEvent "{S Up}"
    Sleep(400)
    SendEvent "{D Down}"
    Sleep(2100)
    SendEvent "{D Up}"
    Sleep(500)
    global CurrentZone := "100"
}
Escape() {
    OddXCheck()
    Sleep(300)
    SendEvent "{Click, 166, 390, 1}"
    Sleep(500)
    loop 3 {
        SendEvent "{Click, 1115, 254, 1}"
    }
    Sleep(300)
    SendText "Mushroom Lab"
    Sleep(300)
    SendEvent "{Click, 958, 356, 1}"
    Sleep(TpWaitTime)
    global CurrentZone := "106"
}
MoveToComputerOfEVIL() {
    OddXCheck()
    Sleep(300)
    SendEvent "{Click, 166, 390, 1}"
    Sleep(500)
    loop 3 {
        SendEvent "{Click, 1115, 254, 1}"
    }
    Sleep(300)
    SendText "Tech Spawn"
    Sleep(300)
    SendEvent "{Click, 958, 356, 1}"
    Sleep(TpWaitTime)
    SendEvent "{Q Down}{Q Up}"
    Sleep(200)
    SendEvent "{A Down}"
    Sleep(2500)
    SendEvent "{A Up}"
    Sleep(100)
    SendEvent "{W Down}"
    Sleep(495)
    SendEvent "{W Up}"
    Sleep(500)
    global CurrentZone := "100"
}

QuestCheckForMulti() {
  QuestsMultiArray := Map()
  QuestsMultiArray["Fq1"] := ""
  QuestsMultiArray["Fq2"] := ""
  ;QuestsMultiArray["Fq3"] := ""

  if not MultiTaskQuests {
    return "nil"
  }


  Item := 0
  ZoneFarm := 0
  DiamondZone := 0
  Eggs := 0

  FoundMulti_AbleQuests := 0

  for QuestNum, ___A in QuestMultiTask {
    if Q3 = QuestNum {
      QuestsMultiArray["Fq1"] := QuestMultiTask[String(Q3)]
      FoundMulti_AbleQuests += 1
  
      if QuestMultiTask[String(Q3)] = "Item" {
        Item += 1
      } else if QuestMultiTask[String(Q3)] = "ZoneFarming" {
        ZoneFarm += 1
      } else if QuestMultiTask[String(Q3)] = "Diamond Zone" {
        DiamondZone += 1
      } else if QuestMultiTask[String(Q3)] = "Egg" {
        Eggs += 1
      }
    }
  }

  for QuestNum, ___A in QuestMultiTask {
    if QuestNum = Q4 {
      QuestsMultiArray["Fq2"] := QuestMultiTask[String(Q4)]
      FoundMulti_AbleQuests += 1
  
      if QuestMultiTask[String(Q4)] = "Item" {
        Item += 1
      } else if QuestMultiTask[String(Q4)] = "ZoneFarming" {
        ZoneFarm += 1
      } else if QuestMultiTask[String(Q4)] = "Diamond Zone" {
        DiamondZone += 1
      } else if QuestMultiTask[String(Q4)] = "Egg" {
        Eggs += 1
      }
    }
  }

  if Item >= 2 {
    return "2Item:" QuestNumToItem[String(Q3)] "|" QuestNumToItem[String(Q4)]
  } else if Item >= 1 and ZoneFarm >= 1 {
      if QuestsMultiArray["Fq1"] = "Item" {
        return "ZoneItem:" QuestNumToItem[String(Q3)]
      } else {
        return "ZoneItem:" QuestNumToItem[String(Q4)]
      }
  } else if ZoneFarm >= 2 {
    return "nil"
  } else if DiamondZone >= 2 {
    return "nil"
  } else if Eggs >= 1 and ZoneFarm >= 1 {
    if QuestsMultiArray["Fq1"] = "Egg" {
      return "ZoneEgg:" String(Q3)
    } else {
      return "ZoneEgg:" String(Q4)
    }
  } else if Eggs >= 1 and DiamondZone >= 1 {
    if QuestsMultiArray["Fq1"] = "Egg" {
      return "DiamondEgg:" String(Q3)
    } else {
      return "DiamondEgg:" String(Q4)
    }
  }

  return "nil"

}

hatcheg() {
  Sleep(300)
  loop 5 {
    SendEvent "{E Down}{E Up}"
    Sleep(300)
    SendEvent "{Click, 1191, 721, 1}"
  }

  A_GetQuestsTimer := A_TickCount
  loop {
    if (A_TickCount - A_GetQuestsTimer) >= QuestAPICallDelay {
      QuestsHaveChanged := GetQuests()
      A_GetQuestsTimer := A_TickCount
      if QuestsHaveChanged {
        break
      }
    }

    SendEvent "{Click, 1866, 823, 1}"
    Sleep(10)
  }
  Sleep(300)
  SendEvent "{W Down}"
  Sleep(2000)
  SendEvent "{W Up}"
  Sleep(500)
}

; Idknames anymreo Rahhhhhh
QuestFunction() {


  if LQ3 != Q3 or LQ4 != Q4 {
  GetQuests()
  }
  ReconnectTickTime := A_TickCount
  loop {
    if (A_TickCount - ReconnectTickTime) >= AutoReconnectCheckDelay {
      ReconnectTest()
      ReconnectTickTime := A_TickCount
    }

    QuestToMulti := QuestCheckForMulti()

    if QuestToMulti != "nil" and MultiTaskQuests {
      if InStr(QuestToMulti, "2Item") {
        global CurrentQuest := "MULTI:2ITEM"
        if CurrentZone != 149 {
          MoveToFinalZone()
          EnableAutoFarm()
        }
        MultipleUseItem(StrSplit(StrSplit(QuestToMulti, ":")[2], "|"), DelayBetweenItemUse)
        Sleep(400)
        OddXCheck()
        continue
      }
      if InStr(QuestToMulti, "ZoneItem") {
        global CurrentQuest := "MULTI:ZONEITEM"
        if CurrentZone != 149 {
          MoveToFinalZone()
          EnableAutoFarm()
        }
        UseItem(StrSplit(QuestToMulti, ":")[2], DelayBetweenItemUse)
        Sleep(400)
        OddXCheck()
        continue
      }
      if InStr(QuestToMulti, "ZoneEgg") {
        global CurrentQuest := "MULTI:ZONEEGG"
        WhatEggQuest :=  StrSplit(QuestToMulti, ":")[2]
        if CurrentZone != 149 {
          MoveToFinalZone()
          EnableAutoFarm()
          if WhatEggQuest = "9" {
            MoveToBestEgg()
            hatcheg()
          } else {
            MoveToSecondBestEgg()
            hatcheg()
          }
        } else {
          EnableAutoFarm()
          if WhatEggQuest = "9" {
            MoveToBestEgg()
            hatcheg()
          } else {
            MoveToSecondBestEgg()
            hatcheg()
          }
        }
        continue
      }
      if InStr(QuestToMulti, "DiamondEgg") {
        global CurrentQuest := "MULTI:DIAMONDEGG"
        WhatEggQuest :=  StrSplit(QuestToMulti, ":")[2]
        if CurrentZone != 100 {
          MoveToVipArea()
          EnableAutoFarm()
          Escape()
          if WhatEggQuest = "9" {
            MoveToBestEgg()
            hatcheg()
          } else {
            MoveToSecondBestEgg()
            hatcheg()
          }
        } else {
          Escape()
          MoveToVipArea()
          EnableAutoFarm()
          Escape()
          if WhatEggQuest = "9" {
            MoveToBestEgg()
            hatcheg()
          } else {
            MoveToSecondBestEgg()
            hatcheg()
          }
        }
        continue
      }
      continue
    } else {
      QuestToDo := -1
      if UseQuestPriority and Q3 > 0 and Q4 > 0 {
        QuestChance1 := QuestsPriority[Q3]
        QuestChance2 := QuestsPriority[Q4]
        TotalQuestChance := QuestChance1 + QuestChance2

        ChosenQuest := Random(0,TotalQuestChance)

        if ChosenQuest <= QuestChance1 {
          QuestToDo := Q3
        } else {
          QuestToDo := Q4
        } 
        } else {
          if Q3 > 0 {
            QuestToDo := Q3
          }
          if Q4 > 0 {
              QuestToDo := Q4
          }
        }
      }
      

      if QuestToDo = 1 {
        global CurrentQuest := "Q:COINJAR"
        if CurrentZone != "149" {
          MoveToFinalZone()
          EnableAutoFarm()
        }
        UseItem("Basic Coin Jar", DelayBetweenItemUse)
        Sleep(400)
        OddXCheck
      }
      if QuestToDo = 3 {
        global CurrentQuest := "Q:COMET"
        if Number(CurrentZone) != 149 {
          MoveToFinalZone()
          EnableAutoFarm()
        }
        UseItem("Comet", DelayBetweenItemUse)
        Sleep(400)
        OddXCheck
      }
      if QuestToDo = 4 or QuestToDo = 7 {
        global CurrentQuest := "Q:PINATA"
        if (CurrentZone) != 149 {
          MoveToFinalZone()
          EnableAutoFarm()
        }
        UseItem("pi単ata", DelayBetweenItemUse)
        Sleep(400)
        OddXCheck
      }
      if QuestToDo = 5 {
        global CurrentQuest := "Q:LUCKYBLOCK"
        if (CurrentZone) != 149 {
          MoveToFinalZone()
          EnableAutoFarm()
        }
        UseItem("Lucky Block", DelayBetweenItemUse)
        Sleep(400)
        OddXCheck
      }
      if QuestToDo = 6 {
        global CurrentQuest := "Q:RAINBOWPETS"
        if (CurrentZone) != 100 {
          MoveToComputerOfEVIL()
        } else {
          Escape()
          MoveToComputerOfEVIL()
        }
        RainbowifyPets()
        SendEvent "{D Down}"
        Sleep(400)
        SendEvent "{D Up}"
        Sleep(400)
      }
      if QuestToDo = 8 {
        global CurrentQuest := "Q:BREAKABLES"
        if (CurrentZone) != 149 {
          MoveToFinalZone()
          EnableAutoFarm()
        }
        A_GetQuestsTimer := A_TickCount
        loop {
          if (A_TickCount - A_GetQuestsTimer) >= QuestAPICallDelay {
            QuestsHaveChanged := GetQuests()
            A_GetQuestsTimer := A_TickCount
            if QuestsHaveChanged {
              break
            }
          }
          if UseUltimate {
            SendEvent "{R Down}{R Up}"
            Sleep(10)
          }
        }
        OddXCheck()
      }
      if QuestToDo = 9 {
        global CurrentQuest := "Q:BESTEGGS"
        if (CurrentZone) != 100 {
          MoveToBestEgg()
        } else {
          Escape()
          MoveToBestEgg()
        }
        hatcheg()
      }
      if QuestToDo = 10 {
        global CurrentQuest := "Q:RAREEGGS"
        if CurrentZone != 100 {
          MoveToSecondBestEgg()
          global CurrentZone := 100
        } else {
          Escape()
          MoveToSecondBestEgg()
        }
        hatcheg()
      }
      if QuestToDo = 11 {
        global CurrentQuest := "Q:EARNDIAMONDS"
        if CurrentZone != 149 {
          MoveToFinalZone()
          EnableAutoFarm()
        }
        A_GetQuestsTimer := A_TickCount
        loop {
          if (A_TickCount - A_GetQuestsTimer) >= QuestAPICallDelay {
            QuestsHaveChanged := GetQuests()
            A_GetQuestsTimer := A_TickCount
            if QuestsHaveChanged {
              break
            }
          }
          if UseUltimate {
            SendEvent "{R Down}{R Up}"
            Sleep(10)
          }
        }
        OddXCheck()
      }
      if QuestToDo = 12 {
        global CurrentQuest := "Q:DIAMONDBREAKABLES"
        if CurrentZone != 100 {
          MoveToVipArea()
          EnableAutoFarm()
        } else {
          Escape()
          MoveToVipArea()
          EnableAutoFarm()
        }
        global A_GetQuestsTimer := A_TickCount
        loop {
          if (A_TickCount - A_GetQuestsTimer) >= QuestAPICallDelay {
            QuestsHaveChanged := GetQuests()
            A_GetQuestsTimer := A_TickCount
            if QuestsHaveChanged {
              break
            }
          }
        }
        OddXCheck()
      }
      if QuestToDo = 13 {
        global CurrentQuest := "Q:GOLDENPETS"
        if CurrentZone != 100 {
          MoveToComputerOfEVIL()
        } else {
          Escape()
          MoveToComputerOfEVIL()
        }
        GoldifyPets()
        SendEvent "{D Down}"
        Sleep(400)
        SendEvent "{D Up}"
        Sleep(400)
      }
      if QuestToDo = 14 {
        global CurrentQuest := "Q:MINICHESTS"
        if CurrentZone != 149 {
          MoveToFinalZone()
          EnableAutoFarm()
        }
        A_GetQuestsTimer := A_TickCount
        loop {
          if (A_TickCount - A_GetQuestsTimer) >= QuestAPICallDelay {
            QuestsHaveChanged := GetQuests()
            A_GetQuestsTimer := A_TickCount
            if QuestsHaveChanged {
              break
            }
          }
          if UseUltimate {
            SendEvent "{R Down}{R Up}"
            Sleep(10)
          }
        }
        OddXCheck()
      }
    }
}

OddXCheck() {
    Sleep(200)
    if PixelSearch(&fx, &fy, 1243, 217, 1304, 281, 0xFF1056, 15) {
        SendEvent "{Click, 1097, 738, 1}"
    }
}

EnableAutoFarm() {
  if UserOwnsAutoFarm {
    Sleep(200)
    if PixelSearch(&lll, &ll2, 120, 437, 199, 526, 0x7AF50C, 20) {
        OutputDebug("Green")
        SendEvent "{Click, 169, 490, 1}"
        Sleep(500)
        SendEvent "{Click, 169, 490, 1}"
    } else {
        OutputDebug("Not Green")
        SendEvent "{Click, 169, 490, 1}"
    }
  }
}

UseItem(ItemName, DelayBetween) { 
    OddXCheck()
    Sleep(200)
    SendEvent "{Click, 968, 929, 1}"
    Sleep(1000)
    SendEvent "{Click, 414, 395, 1}"
    A_GetQuestsTimer := A_TickCount
    loop {
        if A_TickCount - A_GetQuestsTimer >= QuestAPICallDelay {
          QuestsHaveChanged := GetQuests()
          A_GetQuestsTimer := A_TickCount
          if QuestsHaveChanged {
            break
          }
        }

        Sleep(750)
        OddXCheck()
        SendEvent "{Click, 1156, 256, 1}"
        Sleep(100)
        SendText ItemName
        Sleep(100)
        SendEvent "{Click, 523, 407, 1}"
        OddXCheck()
        Sleep(DelayBetween)
        if not PixelSearch(&HHH, &HHH, 1450, 235, 1495, 284, 0xFF155E, 15) {
            SendEvent "{Click, 1494, 235, 1}"
            Sleep(300)
            SendEvent "{Click, 1311, 258, 1}"
            OddXCheck()
            Sleep(400)
            SendEvent "{Click, 968, 929, 1}"
            Sleep(1000)
            SendEvent "{Click, 414, 395, 1}"
        }
    }
    loop 2 {
      SendEvent "{Click, 1494, 235, 1}"
      Sleep(300)
      SendEvent "{Click, 1311, 258, 1}"
      OddXCheck()
    }
}

MultipleUseItem(ItemArray, DelayBetween) { 
  OddXCheck()
  Sleep(200)
  SendEvent "{Click, 968, 929, 1}"
  Sleep(1000)
  SendEvent "{Click, 414, 395, 1}"
  A_GetQuestsTimer := A_TickCount
  loop {
      if A_TickCount - A_GetQuestsTimer >= QuestAPICallDelay {
        QuestsHaveChanged := GetQuests()
        A_GetQuestsTimer := A_TickCount
        if QuestsHaveChanged {
          break
        }
      }

    for ___ItemNum, ItemToUse in ItemArray {
      Sleep(750)
      OddXCheck()
      SendEvent "{Click, 1156, 256, 1}"
      Sleep(100)
      SendText ItemToUse
      Sleep(100)
      SendEvent "{Click, 523, 407, 1}"
      OddXCheck()
      Sleep(DelayBetween)
      if not PixelSearch(&HHH, &HHH, 1450, 235, 1495, 284, 0xFF155E, 15) {
          SendEvent "{Click, 1494, 235, 1}"
          Sleep(300)
          SendEvent "{Click, 1311, 258, 1}"
          OddXCheck()
          Sleep(400)
          SendEvent "{Click, 968, 929, 1}"
          Sleep(1000)
          SendEvent "{Click, 414, 395, 1}"
      }
    }
  }
  loop 2 {
    SendEvent "{Click, 1494, 235, 1}"
    Sleep(300)
    SendEvent "{Click, 1311, 258, 1}"
    OddXCheck()
  }
}

GoldifyPets() {
    for PetNum, PetSearch in PetMachineArray {
        Sleep(400)
        SendEvent "{Click, 1216, 378, 1}"
        Sleep(500)
        SendEvent "{Click, 1115, 253, 1}"
        Sleep(500)
        SendText PetSearch
        if not PixelSearch(&ll3, &ll4, 1055, 368, 1078, 383, 0xFFFFFF, 3) {
            SendEvent "{Shift Down}"
            Sleep(30)
            SendEvent "{Click, 1053, 387, 1}"
            Sleep(30)
            SendEvent "{Shift Up}"
            Sleep(200)
            FoundCreationButton := false
            loop 10 {
                if PixelSearch(&ll5, &ll6, 490, 675, 748, 754, 0x6DF306, 3) {
                    FoundCreationButton := true
                    break
                }
            }
            if FoundCreationButton {
                Sleep(200)
                SendEvent "{Click, 624, 719, 1}"
                Sleep(3500)
                SendEvent "{Click, 964, 718, 1}"
                Sleep(3500)
            } else {
                continue
            }

        } else {
            if not PixelSearch(&ll3, &ll4, 883, 360, 935, 377, 0xFFFFFF, 3) {
                SendEvent "{Shift Down}"
                Sleep(30)
                SendEvent "{Click, 911, 391, 1}"
                Sleep(30)
                SendEvent "{Shift Up}"
                Sleep(200)
                FoundCreationButton := false
                loop 10 {
                    if PixelSearch(&ll5, &ll6, 490, 675, 748, 754, 0x6DF306, 3) {
                        FoundCreationButton := true
                        break
                    }
                }
                if FoundCreationButton {
                    Sleep(200)
                    SendEvent "{Click, 624, 719, 1}"
                    Sleep(3500)
                    SendEvent "{Click, 964, 718, 1}"
                    Sleep(3500)
                } else {
                    continue
                }

            } else {
                continue
            }
        }
    }
    Sleep(200)
    SendEvent "{Click, 1456, 252, 1}"
}

RainbowifyPets() { ; same function as GoldifyPets(), just with1  change :Sob:
    for PetNum, PetSearch in PetMachineArray {
        Sleep(400)
        SendEvent "{Click, 1046, 618, 1}"
        Sleep(500)
        SendEvent "{Click, 1115, 253, 1}"
        Sleep(500)
        SendText PetSearch
        if not PixelSearch(&ll3, &ll4, 1055, 368, 1078, 383, 0xFFFFFF, 3) {
            SendEvent "{Shift Down}"
            Sleep(30)
            SendEvent "{Click, 1053, 387, 1}"
            Sleep(30)
            SendEvent "{Shift Up}"
            Sleep(200)
            FoundCreationButton := false
            loop 10 {
                if PixelSearch(&ll5, &ll6, 490, 675, 748, 754, 0x6DF306, 3) {
                    FoundCreationButton := true
                    break
                }
            }
            if FoundCreationButton {
                Sleep(200)
                SendEvent "{Click, 624, 719, 1}"
                Sleep(3500)
                SendEvent "{Click, 964, 718, 1}"
                Sleep(3500)
            } else {
                continue
            }

        } else {
            if not PixelSearch(&ll3, &ll4, 883, 360, 935, 377, 0xFFFFFF, 3) {
                SendEvent "{Shift Down}"
                Sleep(30)
                SendEvent "{Click, 911, 391, 1}"
                Sleep(30)
                SendEvent "{Shift Up}"
                Sleep(200)
                FoundCreationButton := false
                loop 10 {
                    if PixelSearch(&ll5, &ll6, 490, 675, 748, 754, 0x6DF306, 3) {
                        FoundCreationButton := true
                        break
                    }
                }
                if FoundCreationButton {
                    Sleep(200)
                    SendEvent "{Click, 624, 719, 1}"
                    Sleep(3500)
                    SendEvent "{Click, 964, 718, 1}"
                    Sleep(3500)
                } else {
                    continue
                }

            } else {
                continue
            }
        }
    }
    Sleep(200)
    SendEvent "{Click, 1456, 252, 1}"
} 

CheckClan() {
  ResultText := OCR.FromRect(1165, 315, 290, 56,,5)
  OutputDebug(ResultText.Text)

  AllowedLeadersArray := StrSplit(AllowedLeaders, "|")
  for _LeaderName, LeaderName in AllowedLeadersArray {
    OutputDebug("`nLeaderToFind: " LeaderName "`nLeaderTextFound: " ResultText.Text)
    if InStr(StrLower(ResultText.Text), StrLower(LeaderName), true) {
      global MacroCanWork2 := true
    }
  }
}

CheckPassword(*) {
    Saved := MyGui.Submit()
    FixedPassword := SubStr(CurretPassword,1,15)

    StrCompare(Saved.Password, CurretPassword, false)

    if StrLower(Saved.Password) = StrLower(FixedPassword) {
        SetupUI()
        global MacroCanWork := true
         
    } else {
         
        HitOk := MsgBox("Incorrect Password, Obtain the password from discord.gg/drft (Copied to clipboard)`nor you could try dming A_Basement on discord", "Password Result")
        A_Clipboard := "discord.gg/drft"
        if HitOk = "Ok" {
            ExitApp
        }
    }
}

CloseGui(*) {
    MyGui.Submit
    ExitApp
}

ReconnectTest() {
  Reconnected := TestForReconnect()
  if Reconnected {
    Escape()
    OddXCheck()
     
  }
}

global PositionVariables := Map()
PositionVariables["DcMenuTopLeft"] := [765, 432]
PositionVariables["ReconnectButton"] := [1114, 600]
PositionVariables["TpButtonRedPart"] := [168, 390]

TestForReconnect() {
  Results := OCR.FromRect(765,430,400,210,,5)
  if InStr(Results.Text, "Disconnected") {
    SendEvent "{Click," PositionVariables["ReconnectButton"][1] "," PositionVariables["ReconnectButton"][2] ", 1}"
    SendEvent "{Click," PositionVariables["ReconnectButton"][1] "," PositionVariables["ReconnectButton"][2] ", 1}"
    SendEvent "{Click," PositionVariables["ReconnectButton"][1] "," PositionVariables["ReconnectButton"][2] ", 1}"
    SendEvent "{Click," PositionVariables["ReconnectButton"][1] "," PositionVariables["ReconnectButton"][2] ", 1}"
    OutputDebug(PixelGetColor(168, 390))
    loop {
      Sleep(100)
      if PixelSearch(&u,&u,PositionVariables["TpButtonRedPart"][1]-5,PositionVariables["TpButtonRedPart"][2]-5,PositionVariables["TpButtonRedPart"][1]+5,PositionVariables["TpButtonRedPart"][2]+5, 0x305D77, 15) {
        return true
      }
    } 
  }
  return false
}

 

whr := ComObject("WinHttp.WinHttpRequest.5.1")
whr.Open("GET", "https://raw.githubusercontent.com/SimplyJustBased/MacroShenanigans/main/ps.ahk", true)
 
whr.Send()
whr.WaitForResponse()
CurretPassword := whr.ResponseText

MyGui := Gui(, "Password Required")
MyGui.Opt("-SysMenu +AlwaysOnTop")
MyGui.Add("Text",,"Password:")
MyGui.Add("Edit","w150 vPassword ym")
MyGui.Add("Button","Default", "Sumbit").OnEvent("Click", CheckPassword)
MyGui.Add("Button","Default yp", "Cancel").OnEvent("Click", CloseGui)
MyGui.OnEvent("Close", CheckPassword)
MyGui.Show()

whr := ComObject("WinHttp.WinHttpRequest.5.1")
whr.Open("GET", "https://raw.githubusercontent.com/evilevilman/chestsethjsiethaiusohosierhoisrehg/main/lead", true)
 
whr.Send()
whr.WaitForResponse()
AllowedLeaders := SubStr(whr.ResponseText, 1, 29)

 

F3::{
    if MacroCanWork3 {
      if not MacroCanWork {
        ExitApp
      }
      Sleep(200)
      OddXCheck()
      Escape()
       

      Sleep(200)
        OddXCheck()
        Sleep(200)
        SendEvent "{Click, 968, 929, 1}"
        Sleep(1000)
        SendEvent "{Click, 1083, 933, 1}"
        Sleep(750)
        CheckClan()
        Sleep(750)
        if not MacroCanWork2 {
          ExitApp
        }

        QuestFunction()
    }
}

F5::{
  MsgBox("Debug For V1.045:`nQuest3: " QuestsToText[Q3] "`nQuest4: " QuestsToText[Q4] "`nLastQuestUpdateTime: " Round(((A_TickCount - LQUT)/1000)) "`nCurrentQuest: " CurrentQuest)
}

 

Highlight(x?, y?, w?, h?, showTime:=0, color:="ff0000", d:=2) {
    static guis := []
  
    if !IsSet(x) {
          for _, r in guis
              r.Destroy()
          guis := []
      return
      }
      if !guis.Length {
          Loop 4
              guis.Push(Gui("+AlwaysOnTop -Caption +ToolWindow -DPIScale +E0x08000000"))
      }
    Loop 4 {
      i:=A_Index
      , x1:=(i=2 ? x+w : x-d)
      , y1:=(i=3 ? y+h : y-d)
      , w1:=(i=1 or i=3 ? w+2*d : d)
      , h1:=(i=2 or i=4 ? h+2*d : d)
      guis[i].BackColor := color
      guis[i].Show("NA x" . x1 . " y" . y1 . " w" . w1 . " h" . h1)
    }
    if showTime > 0 {
      Sleep(showTime)
      Highlight()
    } else if showTime < 0
      SetTimer(Highlight, -Abs(showTime))
}
  
F8::ExitApp

; I (Basement) DID NOT MAKE THIS, I AINT DOING ALLAT LOWKEY THO

; ; originally posted by user coco on AutoHotkey.com
; https://github.com/cocobelgica/AutoHotkey-JSON

Jxon_Load(&src, args*) {
	key := "", is_key := false
	stack := [ tree := [] ]
	next := '"{[01234567890-tfn'
	pos := 0
	
	while ( (ch := SubStr(src, ++pos, 1)) != "" ) {
		if InStr(" `t`n`r", ch)
			continue
		if !InStr(next, ch, true) {
			testArr := StrSplit(SubStr(src, 1, pos), "`n")
			
			ln := testArr.Length
			col := pos - InStr(src, "`n",, -(StrLen(src)-pos+1))

			msg := Format("{}: line {} col {} (char {})"
			,   (next == "")      ? ["Extra data", ch := SubStr(src, pos)][1]
			  : (next == "'")     ? "Unterminated string starting at"
			  : (next == "\")     ? "Invalid \escape"
			  : (next == ":")     ? "Expecting ':' delimiter"
			  : (next == '"')     ? "Expecting object key enclosed in double quotes"
			  : (next == '"}')    ? "Expecting object key enclosed in double quotes or object closing '}'"
			  : (next == ",}")    ? "Expecting ',' delimiter or object closing '}'"
			  : (next == ",]")    ? "Expecting ',' delimiter or array closing ']'"
			  : [ "Expecting JSON value(string, number, [true, false, null], object or array)"
			    , ch := SubStr(src, pos, (SubStr(src, pos)~="[\]\},\s]|$")-1) ][1]
			, ln, col, pos)

			throw Error(msg, -1, ch)
		}
		
		obj := stack[1]
        is_array := (obj is Array)
		
		if i := InStr("{[", ch) { ; start new object / map?
			val := (i = 1) ? Map() : Array()	; ahk v2
			
			is_array ? obj.Push(val) : obj[key] := val
			stack.InsertAt(1,val)
			
			next := '"' ((is_key := (ch == "{")) ? "}" : "{[]0123456789-tfn")
		} else if InStr("}]", ch) {
			stack.RemoveAt(1)
            next := (stack[1]==tree) ? "" : (stack[1] is Array) ? ",]" : ",}"
		} else if InStr(",:", ch) {
			is_key := (!is_array && ch == ",")
			next := is_key ? '"' : '"{[0123456789-tfn'
		} else { ; string | number | true | false | null
			if (ch == '"') { ; string
				i := pos
				while i := InStr(src, '"',, i+1) {
					val := StrReplace(SubStr(src, pos+1, i-pos-1), "\\", "\u005C")
					if (SubStr(val, -1) != "\")
						break
				}
				if !i ? (pos--, next := "'") : 0
					continue

				pos := i ; update pos

				val := StrReplace(val, "\/", "/")
				val := StrReplace(val, '\"', '"')
				, val := StrReplace(val, "\b", "`b")
				, val := StrReplace(val, "\f", "`f")
				, val := StrReplace(val, "\n", "`n")
				, val := StrReplace(val, "\r", "`r")
				, val := StrReplace(val, "\t", "`t")

				i := 0
				while i := InStr(val, "\",, i+1) {
					if (SubStr(val, i+1, 1) != "u") ? (pos -= StrLen(SubStr(val, i)), next := "\") : 0
						continue 2

					xxxx := Abs("0x" . SubStr(val, i+2, 4)) ; \uXXXX - JSON unicode escape sequence
					if (xxxx < 0x100)
						val := SubStr(val, 1, i-1) . Chr(xxxx) . SubStr(val, i+6)
				}
				
				if is_key {
					key := val, next := ":"
					continue
				}
			} else { ; number | true | false | null
				val := SubStr(src, pos, i := RegExMatch(src, "[\]\},\s]|$",, pos)-pos)
				
                if IsInteger(val)
                    val += 0
                else if IsFloat(val)
                    val += 0
                else if (val == "true" || val == "false")
                    val := (val == "true")
                else if (val == "null")
                    val := ""
                else if is_key {
                    pos--, next := "#"
                    continue
                }
				
				pos += i-1
			}
			
			is_array ? obj.Push(val) : obj[key] := val
			next := obj == tree ? "" : is_array ? ",]" : ",}"
		}
	}
	
	return tree[1]
}

Jxon_Dump(obj, indent:="", lvl:=1) {
	if IsObject(obj) {
        If !(obj is Array || obj is Map || obj is String || obj is Number)
			throw Error("Object type not supported.", -1, Format("<Object at 0x{:p}>", ObjPtr(obj)))
		
		if IsInteger(indent)
		{
			if (indent < 0)
				throw Error("Indent parameter must be a postive integer.", -1, indent)
			spaces := indent, indent := ""
			
			Loop spaces ; ===> changed
				indent .= " "
		}
		indt := ""
		
		Loop indent ? lvl : 0
			indt .= indent
        
        is_array := (obj is Array)
        
		lvl += 1, out := "" ; Make #Warn happy
		for k, v in obj {
			if IsObject(k) || (k == "")
				throw Error("Invalid object key.", -1, k ? Format("<Object at 0x{:p}>", ObjPtr(obj)) : "<blank>")
			
			if !is_array ;// key ; ObjGetCapacity([k], 1)
				out .= (ObjGetCapacity([k]) ? Jxon_Dump(k) : escape_str(k)) (indent ? ": " : ":") ; token + padding
			
			out .= Jxon_Dump(v, indent, lvl) ; value
				.  ( indent ? ",`n" . indt : "," ) ; token + indent
		}

		if (out != "") {
			out := Trim(out, ",`n" . indent)
			if (indent != "")
				out := "`n" . indt . out . "`n" . SubStr(indt, StrLen(indent)+1)
		}
		
		return is_array ? "[" . out . "]" : "{" . out . "}"
	
    } Else If (obj is Number)
        return obj
    
    Else ; String
        return escape_str(obj)
	
    escape_str(obj) {
        obj := StrReplace(obj,"\","\\")
        obj := StrReplace(obj,"`t","\t")
        obj := StrReplace(obj,"`r","\r")
        obj := StrReplace(obj,"`n","\n")
        obj := StrReplace(obj,"`b","\b")
        obj := StrReplace(obj,"`f","\f")
        obj := StrReplace(obj,"/","\/")
        obj := StrReplace(obj,'"','\"')
        
        return '"' obj '"'
    }
}

